name: status backend ci/cd

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  CI:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    # 브랜치 변경
    - name: Checkout
      uses: actions/checkout@v4

    # JDK setting
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # 환경별 yml 파일 생성(1) - dev
    - name: make application-dev.yml
      if: contains(github.ref, 'dev')
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION }}" | base64 --decode > src/main/resources/application.yml
      shell: bash


     # Gradle Build를 위한 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Gradle Build (test 제외)
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # DockerHub 로그인
    - name: DockerHub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker 이미지 빌드
    - name: Docker Image Build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/status-be . --platform=linux/amd64

    # DockerHub Push
    - name: DockerHub Push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/status-be
  CD:
    runs-on: self-hosted # self-hosted 방식
    needs: CI # CI가 성공한 후 진행
    steps:
    
    # 이미지 pull 
    - name : Docker pull
      run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/status-be

    # 컨테이너 종료
    - name: Docker stop container
      run : |
        if [ $(sudo docker ps -a -q -f name=status-be) ]; then
          sudo docker stop status-be
        fi

    # 새로운 컨테이너 실행
    - name: Docker run new container
      run: sudo docker run --rm -it -d -p 8080:8080 --name status-be ${{ secrets.DOCKERHUB_USERNAME }}/status-be

    # 기존 이미지 삭제
    - name: Delete old docker image
      run: sudo docker system prune -f

